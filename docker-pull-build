#!/usr/bin/env perl
#
# Wrapper script that will docker pull any images uses as "FROM"
#

use 5.022;
use warnings;
use Getopt::Long qw( :config pass_through );

sub usage {
  print <<EOF;
Usage: docker-pull-build [docker-build-options]

  Parses the Dockerfile for the build and pull any images used as FROM.
  
EOF

  print "ERROR: @_\n" if @_;
  
  exit(1);
}


### Argument parsing and validation
my %opt;
GetOptions(\%opt, 'help|?', 'file|f=s', 'tag|t=s') or usage();
usage() if $opt{help};


### Pull the destination image, prime the build cache
my $tag = $opt{tag};    ## FIXME: support multiple tags
pull_image($tag) if $tag;


### Scan and pull FROM images
my $dockerfile = $opt{file} || 'Dockerfile';
if (-r $dockerfile) {
  open(my $fh, '<', $dockerfile) or die "FATAL: failed to open '$dockerfile': $!\n";
  while (<$fh>) {
    pull_image($1) if m/^\s*FROM\s+(\S+)/;
  }
  close($fh);
}


## Build the docker build command
my @cmd = qw( docker build );
push @cmd, '--file', $dockerfile if $dockerfile;
push @cmd, '--tag',  $tag        if $tag;
push @cmd, @ARGV;


## Exec it....
print "... building using '@cmd'\n";
exec(@cmd);
die "FATAL: failed to exec '@cmd': $!\n";



##### Utilities

sub pull_image {
  my ($image) = @_;
  
  say "... pulling '$image':";
  system('docker', 'pull', $image);
}
